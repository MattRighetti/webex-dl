#!/bin/bash

source scriptUtils.sh

function __check_prepreq() {
    if test ! $(which jq); then
        fatalln "Could not locate Python3"
    fi

    if test ! $(which ffmpeg); then
        fatalln "Could not locate ffmpeg"
    fi

    infoln "All prereqs are satisfied, proceeding..."
}

function __check_exists_folder() {
    if [[ ! -d $1 ]]; then
        warnln "$1 folder doesn't exist"
        warnln "Creating folder"
        mkdir -p $1
    fi
}

function __check_succeeded() {
    if [[ $? -ne 0 ]]; then
        warnln "Not succeeded"
        exit 1
    fi
}

# Get Video ID
function get_id() {
    LINK=$1

    # There can be a lot of different URLs here
    # RCID Version looks something like this: https://politecnicomilano.webex.com/politecnicomilano/ldr.php?RCID=68510a8db550408aa72b6271738052eb
    # Another exalple                       : https://politecnicomilano.webex.com/politecnicomilano/ldr.php?RCID=898ac5fd9e684b0c91c7fcb865fb0920

    # Other examples have the RCID code diretcly after the last url component
    # An example is this URL: https://politecnicomilano.webex.com/politecnicomilano/play/68510a8db550408aa72b6271738052eb

    # The code for all these examples corresponds to the regex -> [A-Za-z0-9]{32}
    echo $LINK | grep -oE '[A-Za-z0-9]{32}'
}

# Get JSON info about the video link
function get_webex_info() {
    VIDEO_ID=$1
    TICKET_VALUE=$2

    curl -s "https://politecnicomilano.webex.com/webappng/api/v1/recordings/${VIDEO_ID}/stream?siteurl=politecnicomilano" \
    -H   "Cookie: ticket=${TICKET_VALUE};"
}

# Get JSON Value
function get_json_value() {
    VALUE=$1

    echo $2 | \
    jq -r ".mp4StreamOption.${VALUE}" 2>/dev/null
}

# Get recording title
function get_video_title() {
    echo $1 | \
    jq -r ".recordName" 2>/dev/null
}

# Get Link to XML file that contains m3u8 file name
function get_xml_link() {
    sed -e "s/\${recordingDir}/$1/" \
        -e "s/\${timestamp}/$2/" \
        -e "s/\${token}/$3/" \
        -e "s/\${xmlName}/$4/" \
        api.txt
}

# Get M3U8 Filename
function get_file_name() {
    LINK=$1

    curl -s $LINK | \
    grep -oE "<Sequence duration=.*</Sequence>" | \
    sed -E "s/<Sequence.*>(.*)<\/Sequence>/\1/"
}

function save_m3u8() {
    URL=$1
    TICKET=$2
    VIDEO_ID=$(get_id ${URL})

    JSON="$(get_webex_info $VIDEO_ID $TICKET | tr -d ' ')"

    REC_DIR="$(get_json_value recordingDir ${JSON})"
    TS="$(get_json_value timestamp ${JSON})"
    TOKEN="$(get_json_value token ${JSON})"
    XML_NAME="$(get_json_value xmlName ${JSON})"

    if [[ $? -ne 0 ]]; then
        fatalln "Could not parse JSON, is you ticket value still valid?\nDid you use the correct link?"
    fi

    XML_LINK=$(get_xml_link $REC_DIR $TS $TOKEN $XML_NAME)

    FILENAME=$(get_file_name $XML_LINK)
    TITLE="$(get_video_title ${JSON})"
    M3U8_LINK="https://nln1vss.webex.com/hls-vod/recordingDir/${REC_DIR}/timestamp/${TS}/token/${TOKEN}/fileName/${FILENAME}.m3u8"

    echo "$TITLE,$M3U8_LINK" >> $3
}

function download_file() {
    URL=$1
    FILENAME=$2

    infoln "Downloading -> ${FILENAME##*/}"
    start_time=$(date +%s)
    ffmpeg -nostdin -i $URL \
        -c copy \
        -bsf:a aac_adtstoasc "$FILENAME" \
        1>/dev/null 2>&1
    end_time=$(date +%s)
    runtime=$(prettytime "$(( $end_time-$start_time ))")

    if [[ $? -ne 0 ]]; then
        errorln "Couldn't download ${FILENAME##*/}"
    else
        successln "${FILENAME##*/} successfully downloaded in ${runtime}"
    fi
}


# GLOBAL
PROCESSES=1
VERBOSE=false

# PARSE ARGS
while [[ $# -ge 1 ]]
do
key="$1"
    case $key in
        -f|--file)
        if [[ ! -z "$2" ]]; then
            LINKS_FILE=$2
        else
            fatalln "You have not provided enough arguments for flag -f, --file"
        fi
        shift
        shift
        ;;
        -i)
        shift
        ;;
        -t|--ticket)
        TICKET=$2
        shift
        shift
        ;;
        -tf|--ticket-file)
        if [[ ! -z "$2" ]]; then
            TICKET_FILE=$2
        else
            fatalln "You have not provided enough arguments for flag -f, --file"
        fi
        shift
        shift
        ;;
        -p)
        if [[ ! -z "$2" ]]; then
            PROCESSES=$2
        else
            fatalln "You have not provided enough arguments for flag -p"
        fi
        shift
        shift
        ;;
        -v)
        VERBOSE=true
        shift
        ;;
        -h|--help)
        echo "Webex-dl is a script tool that downloads Webex meetings that you pass to it"
        echo "Usage: webex-dl [ -f links_file ] [ -tf ticket_file ] [ -t ticket ] [ -i links ]"
        echo ""
        echo "       Command summary:"
        echo "       -f, --file             Use links contained in file"
        echo "       -t, --ticket           Input ticket from command line"
        echo "       -tf, --ticket-file     Use ticket contained in file"
        echo "       -i                     Input links from command line and don't use file input"
        echo "       -p                     Launches specified number of processes"
        echo "       -v                     Output verbose logs"
        echo "       -h, --help             Print info about the program"
        exit 0
        ;;
        -*|--*=)
        echo "Error: Unsupported flag $1" >&2
        exit 1
        ;;
        *)
        LINKS+=( "$1" )
        shift
        ;;
    esac
done

if [[ "$VERBOSE" = true ]]; then
    debugln "LINKS_FILE=$LINKS_FILE"
    debugln "LINKS=$LINKS"
    debugln "TICKET=$TICKET"
    debugln "TICKET_FILE=$TICKET_FILE"
    debugln "PROCESSES=$PROCESSES"
fi

if [[ -z $LINKS_FILE  ]] && [[ -z $LINKS ]]; then
    fatalln "No link or link file has been specified"
fi

if [[ ! -z $LINKS_FILE  ]] && [[ ! -z $LINKS ]]; then
    warnln "You have given a link file and more input links, only the file links will be downloaded"
    LINKS=()
fi

if [[ -z $TICKET_FILE  ]] && [[ -z $TICKET ]]; then
    fatalln "No ticket or ticket file has been specified"
fi

if [[ ! -z $TICKET_FILE  ]] && [[ ! -z $TICKET ]]; then
    warnln "You have given a ticket file and a ticket input, only the ticket file will be used"
fi

########
# MAIN #
########
if [[ -z $TICKET ]]; then
    TICKET="$( cat ${TICKET_FILE} | tr -d ' ' )"
fi

__check_prepreq

DOWNLOAD_FOLDER=$(jq .download_folder config.json | tr -d '"')
infoln "Videos will be saved in ${DOWNLOAD_FOLDER}"
GEN_LINK_FILE="$(pwd)/store.csv"

if [ -f $GEN_LINK_FILE ]; then
    infoln "Deleting pre-existent link file"
    rm $GEN_LINK_FILE
fi

if [[ ${#LINKS[@]} -eq 0 ]]; then
    while read LINK; do
        LINKS+=( "$LINK" )
    done < $LINKS_FILE
fi

for link in "${LINKS[@]}"; do
    save_m3u8 $link $TICKET $GEN_LINK_FILE
done

__check_exists_folder $DOWNLOAD_FOLDER

i=0
trap "exit" INT
while IFS=, read -r NAME LINK; do
    ((i=i%PROCESSES)); ((i++==0)) && wait
    download_file "$LINK" "${DOWNLOAD_FOLDER}/${NAME}.mp4" &
done < store.csv
wait

exit 0