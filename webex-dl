#!/bin/bash

source scriptUtils.sh

function __check_prepreq() {
    if test ! $(which jq); then
        fatalln "Could not locate Python3"
    fi

    if test ! $(which ffmpeg); then
        fatalln "Could not locate ffmpeg"
    fi

    infoln "All prereqs are satisfied, proceeding..."
}

function __check_exists_folder() {
    if [[ ! -d $1 ]]; then
        warnln "$1 folder doesn't exist"
        warnln "Creating folder"
        mkdir -p $1
    fi
}

function __check_succeeded() {
    if [[ $? -ne 0 ]]; then
        warnln "Not succeeded"
        exit 1
    fi
}

# Get Video ID
function get_id() {
    LINK=$1
    
    echo "${LINK##*/}"
}

# Get JSON info about the video link
function get_webex_info() {
    VIDEO_ID=$1
    TICKET_VALUE=$2

    curl -s "https://politecnicomilano.webex.com/webappng/api/v1/recordings/${VIDEO_ID}/stream?siteurl=politecnicomilano" \
    -H   "Cookie: ticket=${TICKET_VALUE};"
}

# Get JSON Value
function get_json_value() {
    VALUE=$1

    echo $2 | \
    jq -r ".mp4StreamOption.${VALUE}" 2>/dev/null
}

# Get recording title
function get_video_title() {
    echo $1 | \
    jq -r ".recordName" 2>/dev/null
}

# Get Link to XML file that contains m3u8 file name
function get_xml_link() {
    sed -e "s/\${recordingDir}/$1/" \
        -e "s/\${timestamp}/$2/" \
        -e "s/\${token}/$3/" \
        -e "s/\${xmlName}/$4/" \
        api.txt
}

# Get M3U8 Filename
function get_file_name() {
    LINK=$1

    curl -s $LINK | \
    grep -o -E "<Sequence duration=.*</Sequence>" | \
    sed -E "s/<Sequence.*>(.*)<\/Sequence>/\1/"
}

function save_m3u8() {
    URL=$1
    TICKET=$2
    VIDEO_ID=$(get_id ${URL})

    JSON="$(get_webex_info $VIDEO_ID $TICKET | tr -d ' ')"

    REC_DIR="$(get_json_value recordingDir ${JSON})"
    TS="$(get_json_value timestamp ${JSON})"
    TOKEN="$(get_json_value token ${JSON})"
    XML_NAME="$(get_json_value xmlName ${JSON})"

    if [[ $? -ne 0 ]]; then
        fatalln "Could not parse JSON, is you ticket value still valid?"
    fi

    XML_LINK=$(get_xml_link $REC_DIR $TS $TOKEN $XML_NAME)

    FILENAME=$(get_file_name $XML_LINK)
    TITLE="$(get_video_title ${JSON})"
    M3U8_LINK="https://nln1vss.webex.com/hls-vod/recordingDir/${REC_DIR}/timestamp/${TS}/token/${TOKEN}/fileName/${FILENAME}.m3u8"

    echo "$TITLE,$M3U8_LINK" >> $3
}

function download_file() {
    URL=$1
    FILENAME=$2

    infoln "Downloading -> ${FILENAME##*/}"
    start_time=$(date +%s)
    ffmpeg -nostdin -i $URL \
        -c copy \
        -bsf:a aac_adtstoasc "$FILENAME" \
        1>/dev/null 2>&1
    end_time=$(date +%s)
    runtime=$(prettytime "$(( $end_time-$start_time ))")

    if [[ $? -ne 0 ]]; then
        errorln "Couldn't download ${FILENAME##*/}"
    else
        successln "${FILENAME##*/} successfully downloaded in ${runtime}"
    fi
}

function itertxt() {
    totalLines=$(wc -l links.txt | awk '{ print $1 }')
    barLen=$(( $totalLines * 2 ))
    BAR="$(print_times "#" $barLen)"
    FILL="$(print_times "-" $barLen)"

    LINK_FILE="$(pwd)/store.csv"

    count=0
    while read LINK; do
        # update progress bar
        count=$(( $count + 1 ))
        percent=$(( ($count * 100 / $totalLines * 100) / 100 ))
        i=$(( $percent * $barLen / 100 ))
        echo -ne "\r${C_RED}Creating CSV file with links to M3U8 file [${BAR:0:$i}${FILL:$i:$barLen}] $count/$totalLines ($percent%)${C_RESET}"
        # exec
        $1 $LINK $2 $3
    done < links.txt
    echo -ne "\n${C_GREEN}Completed${C_RESET}\n"
}

# MAIN

TICKET="$( cat ticket.txt | tr -d ' ' )"

__check_prepreq

DOWNLOAD_FOLDER=$(jq .download_folder config.json | tr -d '"')
infoln "Videos will be saved in ${DOWNLOAD_FOLDER}"

LINK_FILE="$(pwd)/store.csv"
itertxt save_m3u8 $TICKET $LINK_FILE

__check_exists_folder $DOWNLOAD_FOLDER

trap "exit" INT
while IFS=, read -r NAME LINK; do
    FILENAME="${NAME}.mp4"
    DOWNLOAD_FILE="$(pwd)/videos/${FILENAME}"
    download_file "$LINK" "$DOWNLOAD_FILE"
done < store.csv